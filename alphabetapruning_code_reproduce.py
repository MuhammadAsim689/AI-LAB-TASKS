# -*- coding: utf-8 -*-
"""AlphaBetaPruning code reproduce.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OHRvMAHDaxEYMcD_1fzMfqoMx8MqvjyW

**ALPHA BETA PRUNING CODE REPRODUCE**
"""

# Initial values of Alpha and Beta
MAX, MIN = 2000, -2000

# Returns optimal value for current player
#(Initially called for root and maximizer)
def minimax(depth, nodeIndex, maximizingPlayer,
			values, alpha, beta):

	# Terminating condition. i.e
	# leaf node is reached
	if depth == 3:
		return values[nodeIndex]

	if maximizingPlayer:

		best = MIN

		# Recur for left and right children
		for i in range(0, 2):

			val = minimax(depth + 1, nodeIndex * 2 + i,
						False, values, alpha, beta)
			best = max(best, val)
			alpha = max(alpha, best)

			# Alpha Beta Pruning
			if beta <= alpha:
				break

		return best

	else:
		best = MAX

		# Recur for left and
		# right children
		for i in range(0, 2):

			val = minimax(depth + 1, nodeIndex * 2 + i,
							True, values, alpha, beta)
			best = min(best, val)
			beta = min(beta, best)

			# Alpha Beta Pruning
			if beta <= alpha:
				break

		return best

# Driver Code
if __name__ == "__main__":

	values = [5, 9, 7, 4, 3, 2, 1, 0]
	print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX))